best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
source("submitScript3.R")
submit()
submit()
submit()
source('C:/Users/Paul Askew/Coursera/best.R')
best("AK","heart attack")
best("TX","heart attack")
head(data)
head(dat)
source('C:/Users/Paul Askew/Coursera/best.R')
head(dat)
best("TX","heart attack")
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
?sorted
??sorted
?order
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
source('C:/Users/Paul Askew/Coursera/rankhospital.R')
rankall(TX,heart failure,3)
rankall("TX","heart failure",3)
rankhospital("TX","heart failure",3)
rankhospital("TX","heart failure")
submit()
submit()
submit()
submit()
source('C:/Users/Paul Askew/Coursera/rankall.R')
source('C:/Users/Paul Askew/Coursera/rankall.R')
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital(heart failure",3)
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankhospital("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankall("heart failure",3)
source('C:/Users/Paul Askew/Coursera/rankall.R')
rankall("heart failure",3)
rankall("heart failure")
rankall("heart failure",1000)
submit
submit()
submit()
submit()
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
Quiz1
Quiz1.R
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
list.files("./data")
setwd("data")
getwd()
head(house.csv)
head("house.csv")
heads("house.csv")
head('house.csv')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("xlsx")
Quiz1.R
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
Quiz1.R
Quiz1
getwd()
setwd(//)
setwd("C:/Users/Paul Askew/Coursera")
Quiz1.R
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
ans
install.packages("XML")
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
doc<-xmlTreePars(fileURL,useInternal=TRUE)
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
doc<-xmlTreeParse(fileURL,useInternal=TRUE)
ans
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
xmlName(rootNode)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
names(rootNode)
rootNode[1]
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
selector
zipcodes
xmlValue()
xmlValue('zipcode')
xpathSApply(rootNode,"//zipcode",xmlValue)
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
xpathSApply(rootNode,"//zipcode",xmlValue)
?fread
??fread()
?fread()
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("data.table")
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
?rowMeans
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
install.packages("fread")
system.time(replicate(1000,sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(1000,mean(DT$pwgtp15,by=DT$SEX)))
system.time(replicate(1000,rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,(rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]))
system.time(replicate(1000,(rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2])))
system.time(replicate(1000,{rowMeans(DT)[DT$SEX==1];rowMeans(DT)[DT$SEX==2]}))
system.time(replicate(1000,tapply(DT$pwgtp15,DT$SEX,mean)))
system.time(replicate(1000,DT[,mean(pwgtp15),by=SEX]))
system.time(replicate(1000,mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time(replicate(1000,{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}))
source('C:/Users/Paul Askew/Coursera/Quiz1.R')
swirl()
library(swirl)
library(swirl)
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r-version=="3.1.1",country="US")
filter(cran,r-version=="3.1.1",country=="US")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US" | country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version==!is.na())
filter(cran,!is.na(r_version))
cran2<-seelct(cran,size:ip_id)
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(cran,avg_bytes=mean(size))
summarize(cran,mean(size))
summarize(by_package,mean(size))
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
submit(summarize1)
submit()
reset()
# Compute four values, in the following order, from
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
?n
?n_distinct
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
avg_bytes = mean(size))
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
swirl()
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpeWsyZH/summarize1.R')
submit()
swirl()
submit()
reset()
swirl()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
swirl()
library(swirl)
swirl()
submit()
pack_sum
quantile(pack_sum$count, probs =0.99)
top_counts<-filter(pack_sum,counts>679)
top_counts<-filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted<-arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_uniquw_sorted<-arrange(top_unique,desc(unique()))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
SUBMIT()
submit()
submit()
View(result3)
submit()
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpO8hniN/chain1.R')
source('C:/Users/PAULAS~1/AppData/Local/Temp/RtmpO8hniN/chain1.R')
submit()
submit()
submit()
submit()
submit()
setwd("~/GitHub/RepData_PeerAssessment1")
setwd("~/GitHub/RepData_PeerAssessment1")
if(!file.exists("./activity/activity.csv")){
unzip("activity.zip", exdir = ".")}
#load first file into a variable if not already present
if(!"activity" %in% ls()){
activity <- read.csv("./activity/activity.csv")}
head(activity)
setwd("~/GitHub/RepData_PeerAssessment1")
if(!file.exists("./activity/activity.csv")){
unzip("activity.zip", exdir = ".")}
#load first file into a variable if not already present
if(!"activity" %in% ls()){
activity <- read.csv("./activity/activity.csv")}
head(activity)
dim(activity)
str(activity)
tail(activity)
setwd("~/GitHub/RepData_PeerAssessment1")
if(!file.exists("./activity/activity.csv")){
unzip("activity.zip", exdir = ".")}
#load first file into a variable if not already present
if(!"activity" %in% ls()){
activity <- read.csv("./activity/activity.csv")}
head(activity)
for(i in 1:length(activity) ) {
str(activity[i])
}
str(activity)
setwd("~/GitHub/RepData_PeerAssessment1")
if(!file.exists("./activity/activity.csv")){
unzip("activity.zip", exdir = ".")}
#load first file into a variable if not already present
if(!"activity" %in% ls()){
activity <- read.csv("./activity/activity.csv")}
head(activity)
str(activity)
activity$date <- as.Date( activity$date, format = '%Y-%m-%d' )
str(activity$date)
activity
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
head(totsteps)
## Loading and preprocessing the data
source('~/.active-rstudio-document', echo=TRUE)
First of all we need to load and preprocess the data.
median(totsteps)
median(totsteps$steps)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
totplot<-ggplot(totsteps,aes(x=sum(steps)))+geom(histogram)
print(totplot)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
totplot<-ggplot(totsteps,aes(x=sum(steps)))+geom(histogram)
print(totplot)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
totplot<-ggplot(totsteps,aes(x=sum(steps)))+geom_histogram())
print(totplot)
median(totsteps$steps)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
totplot<-ggplot(totsteps,aes(x=sum(steps)))+geom_histogram()
print(totplot)
head(totsteps)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
totplot<-ggplot(totsteps,aes(x=sum(x)))+geom_histogram()
print(totplot)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
hist(totsteps$x)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
hist(totsteps$x, xlab="Number of steps", title="Histogram of Daily Steps")
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum")
hist(totsteps$x, xlab="Number of steps", main="Histogram of Daily Steps")
median(totsteps$x)
mean(totsteps$x)
head(totsteps)
totsteps$x
str(totsteps)
library(ggplot2)
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of steps", main="Histogram of Daily Steps")
str(totsteps)
totsteps$x
head(totsteps)
summary(totsteps)
summary(totsteps$x)['Median']
summary(totsteps$x)['Mean']
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days")
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=30)
?ylim
?hiast
?hist
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim="30")
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,5,10,15,20,25,30))
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
summary(totsteps$x)['Median']
summary(totsteps$x)['Mean']
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30),breaks=c(0:25000,1000))
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30),breaks=c(25*0:25000))
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30),breaks=c(25*0:1000))
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",breaks=c(25*0:1000))
totsteps<-aggregate(activity$steps,list(activity$date),FUN="sum",rm.na=T)
hist(totsteps$x, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
head(activity)
str(activity$interval)
dim(activity$interval)
?aggregate
dailysteps<-aggregate(activity$steps,list(activity$interval),FUN="sum")
head(dailysteps)
dailysteps<-aggregate(activity.steps,list(activity.interval),FUN="sum")
head(dailysteps)
plot
..
dailysteps<-aggregate(activity$steps,list(Interval=activity$interval),FUN="sum")
head(dailysteps)
plot
?plot
dailysteps<-aggregate(activity$steps,list(activity$interval),FUN="sum")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x)
dailysteps<-aggregate(activity$steps,list(activity$interval),FUN="sum")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
dailysteps<-aggregate(activity$steps,list(activity$interval),FUN="sum")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern",ylim=max(dailysteps$x))
summary(dailysteps)
head(dailysteps)
dailysteps<-aggregate(activity$steps,list(activity$interval),FUN="mean")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern",ylim=max(dailysteps$x))
dailysteps<-aggregate(activity$steps,list(interval = as.numeric(activity$interval),FUN="mean")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern",ylim=max(dailysteps$x))
dailysteps<-aggregate(activity$steps,list(interval = as.numeric(as.character(activity$interval))),FUN="mean")
head(dailysteps)
plot(dailysteps$Group.1,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
dailysteps<-aggregate(activity$steps,list(interval = as.numeric(as.character(activity$interval))),FUN="mean")
head(dailysteps)
plot(dailysteps$interval,dailysteps$x,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
dailysteps<-aggregate(activity$steps,list(interval = as.numeric(as.character(activity$interval))),FUN="mean")
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
str(dailysteps)
str(activity)
summary(activity)
dailysteps<-aggregate(activity$steps,list(interval =as.numeric(as.character(activity$interval))),FUN="mean")
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
totsteps<-aggregate(activity$steps,list(date=activity$date),FUN="sum")
names(totsteps)[2]<-"steps"
hist(totsteps$steps, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
head(totseps)
totsteps<-aggregate(activity$steps,list(date=activity$date),FUN="sum")
names(totsteps)[2]<-"steps"
hist(totsteps$steps, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
head(totsteps)
dailysteps<-aggregate(activity$steps,list(interval=as.numeric(activity$interval)),FUN="mean",na.action="ignore")
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern")
dailysteps<-aggregate(activity$steps,list(interval=as.numeric(activity$interval)),FUN="mean",na.action="ignore")
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Dialy Step Pattern",ylim=c(0,100))
dailysteps<-aggregate(activity$steps,list(interval=as.numeric(activity$interval)),FUN="sum",na.action="ignore")
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
dailysteps<-aggregate(activity$steps,list(interval=as.numeric(activity$interval)),FUN="sum",na.omit)
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
dailysteps
head(totsteps)
head(activity)
head(dailysteps)
dailysteps<-aggregate(activity$steps,list(interval=activity$interval),FUN="sum",na.omit)
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
dailysteps<-aggregate(activity$steps,list(interval=activity$interval),mean,na.omit)
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
dailysteps<-aggregate(activity$steps,list(interval=activity$interval),mean(interval),na.omit)
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
totsteps<-aggregate(activity$steps,list(date=activity$date),FUN="sum",na.omit)
names(totsteps)[2]<-"steps"
hist(totsteps$steps, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
totsteps<-aggregate(activity$steps,list(date=activity$date),FUN="sum")
names(totsteps)[2]<-"steps"
hist(totsteps$steps, xlab="Number of Steps", main="Histogram of Daily Steps", ylab="Number of Days",ylim=c(0,30))
dailysteps<-aggregate(activity$steps,list(interval=activity$interval),mean(interval),na.omit)
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
setwd("~/GitHub/RepData_PeerAssessment1")
if(!file.exists("./activity/activity.csv")){
unzip("activity.zip")}
#load first file into a variable if not already present
if(!"activity" %in% ls()){
activity <- read.csv("./activity/activity.csv")}
activity<-na.omit(activity)
activity$date <- as.Date( activity$date, format = '%Y-%m-%d' )
dailysteps<-aggregate(activity$steps,list(interval=activity$interval),mean(interval))
names(dailysteps)[2]<-"avsteps"
head(dailysteps)
summary(dailysteps)
plot(dailysteps$interval,dailysteps$avsteps,type="l",xlab="Interval",ylab="Number of Steps",main="Average Daily Step Pattern",ylim=c(0,100))
